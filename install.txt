*** Dependencies ***

*** Installation ***

This Setup describes the procedure to enable the BE2SAFE module for iRODS 3.3.
For this we removed the _msiBytesBufToStr_ from our module because it was copied, and build into core 3.3.

Enable the module,

Automatically:

1.1. enable the module in "<irods>/modules/BE2SAFE/info.txt"
1.2. rerun the irodssetup script

Manually:

1.1. <irods>/scripts/configure --enable-BE2SAFE
1.2. make clean
1.3. make
1.4 <irods>/irodsctl restart

2. create a symbolic link to the eudat rulebase
	cd <irods>
	ln -s <absolute-irods-path>/modules/EUDAT-PID/rulebase/eudat-v1.re ./server/config/reConfigs/eudat.re

3. edit <irods>/server/config/server.config and append ",eudat" to "reRuleSet" 
	(make sure to include the comma and no spaces)

4. configure iRODS hooks.
	edit the <irods>/server/config/reConfigs/core.re file and add the following two acPostProcForPutHooks:

	acPostProcForPut {
        	ON($objPath like "\*.replicate") {
                	processReplicationCommandFile($objPath);
        	}
	}
	acPostProcForPut {
        	ON($objPath like "\*.pid.create") {
                	processPIDCommandFile($objPath);
       	 	}
	}

5. properly configure the default resource in <irods>/server/config/reConfigs/core.re

6.1 install the python scripts
	cd <irods>
        ln -s <absolute-irods-path>/modules/EUDAT-PID/cmd/* ./server/bin/cmd/
        check permissions on the scripts and make sure they are executable by the irods user
            e.g.chmod u+x cmd/*

6.2 update the "getEpicApiParameters" rule in "./server/config/reConfigs/eudat.re"
    - Configure the credential storage type: "os": stored on the local filesystem or "irods": stored on de irods namespace.
    - Set the path to the credentials file
    - set the correct serverID to include the fully qualified hostname. For instance: "irods://node.domain.com:1247"
    - Set the proper values in the credentials file (see ./cmd/credentials_example for an example)

7. create a shared space in all zones as configured in the eudat.re rulebase getSharedCollection function.
        - defaults to "<zone>/replicate"
        - make sure all users involved in the replication can write in this collection.

8.1 test the epic api interaction by running the "./cmd/epicclient.py test" script manually and with "iexecmd epicclient.py"
8.2 test the replication by changing and triggering "replicate.r" rule in <irods>/modules/EUDAT-PID/rules

DATACENTER only:

If you have more then one community connected to your iRODS, you have to control the access to the epicclient.py script (or everyone connected to it is allowed to modify every PID). For this functionality you need at least iRODS 3.3 (because of the acPreProcForExecCmd hook).

9.1 create credential files per community
9.2 in core.re substitude acPreProcForExecCmd (*cmd){} with:
acPreProcForExecCmd(*cmd) { 
    execEudatAclFilter(*cmd)
}
9.3 in eudat.re you have to modify the filter execEudatAclFilter (we use whitelisting for access to the epicclient.py script)
9.4 modify getEpicClientCredentials, there you have to define the credentials to use for the PID workflow.

We use a redirection to keep the core.re as basic as possible and to implement our logic in eudat.re, of course you can copy&paste the content from eudat.re/execEudatAclFilter to core.re


*** Command files ***

The command files are written to the shared iRODS space and are used to control replications and PID management

1) *.replicate

    Contains a list of replication commands separated by commas:
        command1,command2,command3

    Each replication command contains three parameters, separated by a semicolon:
        "*pid;*source;*destination"
            *pid            the handle of the source object  
            *source         the iRODS location of the source object
            *destination    the iRODS location of the destination object (will be created if it does not exist)

2) *.pid.create

    Contains a command to create a new PID:

    "create;*pid;*destination"
        *pid                the handle of the source object (the parent)
        *destination        the iRODS location of the destination object 

3) *.pid.update

    Contians a command to update a PID:
    
    "update;*pid;*new_pid"
        *pid            the handle of the source object (the parent)
        *new_pid        the (generated) handle of the destination object (the child)


*** TODO ***

- improve logic and data actual written/conveyed
    --> merge pid.create and pid.update actions in a single command file
- improve error handling
 
